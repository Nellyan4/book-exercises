?substr
substr("abcdef", 2, 4)
substring("abcdef", 1:6, 1:6)
substr(x, 2, 5)
substr(lyric, 1, 3)
lyric <- "I like to eat apples and bananas"
substr(lyric, 1, 3)
numoflyric <- nchar(lyric)
substr(lyric,15,numoflyric)
substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
numoflyric <- nchar(lyric)
intro <- substr(lyric, 1, 13)
?gsub
numoflyric <- nchar(lyric)
frutis <- substr(lyric,15,numoflyric)
fruits_e <- gsub("a", "ee", fruits)
numoflyric <- nchar(lyric)
fruits <- substr(lyric,15,numoflyric)
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a","o",fruits)
add_three <- function(x)
x_plus_three <- x + 3
return(x_plus_three)
add_three <- function(x)
x_plus_three <- x + 3
return(x_plus_three)
add_three <- function(x) {
x_plus_three <- x + 3
return(x_plus_three)
}
print(ten)
ten <- add_three(7)
print(ten)
lyric_e <- paste(intro, fruits_e)
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
numoflyric <- nchar(lyric)
fruits <- substr(lyric,15,numoflyric)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
lyric_e <- paste(intro, fruits_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro,fruits_o))
imperial_to_metric <- function(feet, inches)
inches_to_feet <- inches / 12
new_inches <- feet + inches
meters <- 30.48 * feet
return(meters)
imperial_to_metric <- function(feet, inches) {
inches_to_feet <- inches / 12
new_inches <- feet + inches
meters <- 30.48 * feet
return(meters)
}
print(imperial_to_metric(5,10))
imperial_to_metric <- function(feet, inches) {
inches_to_feet <- inches / 12
new_inches <- feet + inches_to_feet
meters <- 30.48 * feet
return(meters)
}
print(imperial_to_metric(5,10))
imperial_to_metric <- function(feet, inches) {
inches_to_feet <- inches / 12
new_inches <- feet + inches_to_feet
feet <- new_inches
meters <- 30.48 * feet
return(meters)
}
print(imperial_to_metric(5,10))
height_in_meters <- imperial_to_metric(5,10)
length(n)
# Exercise 1: creating and operating on vectors
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("a", "b")
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
# Subtract `m` FROM `n`. Note the recycling!
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
# Use the `plot()` function to plot your `wave`!
length(n)
# Add 1 to each element in `n` and print the result
print(n+1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
?seq
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
seq(10,1,1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
seq(10,1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m<-seq(10,1)
# Subtract `m` FROM `n`. Note the recycling!
m-n
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5,10,0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave
wave <- wave + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- 21:30
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- first_ten + next_ten
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- nchar(all_numbers)
# Exercise 1: calling built-in functions
# Create a variable `my_name` that contains your name
my_name<- "Xi Yan"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Print the number of letters in your name
print(name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming")
# Make the `now_doing` variable upper case
toupper(now_doing)
### Bonus
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
fav_1 <- 77
fav_2 <- 35
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1 / sqrt(201)
fav_2 <- fav_2 / sqrt(201)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
# Create a variable `sum_round` that is the sum of the rounded values
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- fav_1 + fav_2
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum,1)
round_1 <- round(fav_1,1)
round_2 <- round(fav_2,1)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- round_1 + round_2
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max(round_sum,sum_round)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- seq(11)
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- seq(2, 5, 1)
# Create a vector `even` that holds the even numbers from 1 to 100
seq(0,100, 2)
# Create a vector `even` that holds the even numbers from 1 to 100
seq(2,100, 2)
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(2,100, 2)
?all
?%%
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2 = 0)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2)
even <- seq(2,100, 2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2) == 0
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all( even %% 2) == 0
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- (8,6,7,5,3,0,9)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8,6,7,5,3,0,9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- sub(1,3,1)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- sub(phone_numbers,1,3,1)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- sub(phone_numbers,3,1)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- sub(1,phone_numbers,1)
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("eggs", "flat_white")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("noodles","water")
# Create a list `meals` that has contains your breakfast and lunch
meals < paste(my_breakfast,my_lunch)
# Create a list `meals` that has contains your breakfast and lunch
meals <- paste(my_breakfast,my_lunch)
# Create a list `meals` that has contains your breakfast and lunch
meals <- paste0(my_breakfast,my_lunch)
# Create a list `meals` that has contains your breakfast and lunch
meals <- paste(my_breakfast,my_lunch)
# Create a list `meals` that has contains your breakfast and lunch
meals <- my_breakfast + my_lunch
meals <- paste(meals,dinner)
dinner <- "poke_bowl"
meals <- paste(meals,dinner)
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c(eggs, flat_white)
